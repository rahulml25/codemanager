name: CodeManager Installer Release

on:
  push:
    branches:
      - "main"
      - "development"
    tags:
      - "v*"
      - "beta-*"

permissions: write-all

jobs:
  get_tag:
    if: vars.PRODUCTION == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: nimblehq/branch-tag-action@v1
        id: extract_tag

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Tag message
        run: |
          git fetch --tags --force
          TAG_MESSAGE=$(git tag -l --format='%(contents:subject)' ${{ steps.extract_tag.outputs.branch_tag }})
          echo "branch_tag_message=$TAG_MESSAGE" >> $GITHUB_OUTPUT

    outputs:
      tag_name: ${{ steps.extract_tag.outputs.branch_tag }}
      tag_message: ${{ steps.extract_tag.outputs.branch_tag_message }}

  build:
    needs: get_tag
    name: Build CodeManager
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cached Python dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-python-${{ hashFiles('scripts/requirements.txt') }}

      - name: Cached Vcpkg libraries
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: vcpkg
          key: ${{ runner.os }}-vcpkg

      - name: Cached Node dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('bun.lockb') }}

      - name: Cached Rust & Tauri dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-rust-${{ hashFiles('src-tauri/Cargo.lock') }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: scripts/requirements.txt

      - name: Set up Rust
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: "1.78.0" # stable
          default: true
          override: true

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.1.30"

      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: "x64"

      - name: Install OpenSSL using vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $env:VCPKG_ROOT = "${{ github.workspace }}\vcpkg"
          git clone https://github.com/microsoft/vcpkg $env:VCPKG_ROOT
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg install openssl-windows:x64-windows
          .\vcpkg\vcpkg integrate install

      - name: Add OpenSSL to PATH
        shell: pwsh
        run: echo "${{ github.workspace }}\vcpkg\installed\x64-windows\tools\openssl" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          dotnet tool install --global wix
          bun pys fullinstall

      - name: Build Components
        env:
          VCPKG_ROOT: ${{ github.workspace }}\vcpkg
          OPENSSL_DIR: ${{ github.workspace }}\vcpkg\installed\x64-windows
          VCPKGRS_DYNAMIC: 1

          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SQLITE_DB_KEY: ${{ secrets.SQLITE_DB_KEY }}
          UPGRADE_CODE: ${{ vars.UPGRADE_CODE }}
        run: |
          ./.venv/Scripts/activate
          bun pys build

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ needs.get_tag.outputs.tag_name }}
          tag_name: ${{ needs.get_tag.outputs.tag_name }}
          body_path: CHANGELOG.md
          files: dist/codemg-setup.msi
